<?xml version="1.0" encoding="UTF-8" ?>
<class name="FmodManager" inherits="Node2D" version="4.0">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="create_event_instance">
			<return type="FmodEventInstance" />
			<argument index="0" name="event_path" type="String" />
			<argument index="1" name="autoplay" type="bool" />
			<argument index="2" name="one_shot" type="bool" />
			<description>
				Create an FMOD Studio Event Instance. See [url="https://www.fmod.com/resources/documentation-api?version=2.02&page=studio-api-eventinstance.html"]FMOD Docs[/url]
			</description>
		</method>
		<method name="get_events">
			<return type="Array" />
			<description>
			</description>
		</method>
		<method name="get_vca">
			<return type="FmodVCA" />
			<argument index="0" name="vca_path" type="String" />
			<description>
				Get an FMOD VCA. See [url="https://www.fmod.com/resources/documentation-api?version=2.02&page=studio-api-vca.html"]FMOD Docs[/url]
			</description>
		</method>
		<method name="initialize">
			<return type="int" enum="Error" />
			<argument index="0" name="max_channels" type="int" />
			<argument index="1" name="studio_flags" type="int" enum="FmodManager.InitFlags" />
			<description>
				Initialize the FMOD Studio System. See [url="https://www.fmod.com/resources/documentation-api?version=2.02&page=studio-api-system.html"]FMOD Docs[/url]
			</description>
		</method>
		<method name="load_bank">
			<return type="int" enum="Error" />
			<argument index="0" name="path_relative_to_project_root" type="String" />
			<argument index="1" name="load_flags" type="int" enum="FmodManager.BankLoadFlags" />
			<description>
				Load a bank. The path specified is relative to your project root. For example: If my banks are in res://fmod_banks/. I would input "fmod_banks/Master.bank" to load the Master bank.
			</description>
		</method>
		<method name="oneshot">
			<return type="FmodEventInstance" />
			<argument index="0" name="event_path" type="String" />
			<argument index="1" name="autoplay" type="bool" />
			<description>
				Create a FmodEventInstance that will be freed after it stops playing. See [method create_event_instance]
			</description>
		</method>
		<method name="play">
			<return type="FmodEventInstance" />
			<argument index="0" name="event_path" type="String" />
			<description>
				Convinience method for ease of use, alias for [method oneshot].
			</description>
		</method>
		<method name="randomize_seed">
			<return type="void" />
			<description>
				Internal function to make sure randomization is done right.
			</description>
		</method>
		<method name="set_events">
			<return type="void" />
			<argument index="0" name="a" type="Array" />
			<description>
				Internal.
			</description>
		</method>
	</methods>
	<members>
		<member name="banks_to_load" type="PackedStringArray" setter="set_banks_to_load" getter="get_banks_to_load" default="PackedStringArray()">
			Banks to load if [member initialize_on_ready] is true.
		</member>
		<member name="initialization_mode" type="int" setter="set_init_mode" getter="get_init_mode" enum="FmodManager.InitFlags" default="1">
			InitFlags to use if [member initalize_on_ready] is true.
		</member>
		<member name="initialize_on_ready" type="bool" setter="set_init_on_ready" getter="get_init_on_ready" default="true">
			Initialize FMOD on ready.
		</member>
	</members>
	<constants>
		<constant name="NORMAL" value="0" enum="InitFlags">
		</constant>
		<constant name="LIVE_UPDATE" value="1" enum="InitFlags">
		</constant>
		<constant name="ALLOW_MISSING_PLUGINS" value="2" enum="InitFlags">
		</constant>
		<constant name="SYNCHRONOUS_UPDATE" value="3" enum="InitFlags">
		</constant>
		<constant name="DEFERRED_CALLBACKS" value="4" enum="InitFlags">
		</constant>
		<constant name="LOAD_FROM_UPDATE" value="5" enum="InitFlags">
		</constant>
		<constant name="MEMORY_TRACKING" value="6" enum="InitFlags">
		</constant>
		<constant name="NORMAL_LOAD" value="0" enum="BankLoadFlags">
		</constant>
		<constant name="NONBLOCKING" value="1" enum="BankLoadFlags">
		</constant>
		<constant name="DECOMPRESS_SAMPLES" value="2" enum="BankLoadFlags">
		</constant>
		<constant name="UNENCRYPTED" value="3" enum="BankLoadFlags">
		</constant>
	</constants>
</class>
